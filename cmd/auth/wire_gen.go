// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package main

import (
	account2 "git.dev.enbrands.com/scrm/bed/scrm/app/auth/internal/biz/account"
	"git.dev.enbrands.com/scrm/bed/scrm/app/auth/internal/conf"
	"git.dev.enbrands.com/scrm/bed/scrm/app/auth/internal/data"
	"git.dev.enbrands.com/scrm/bed/scrm/app/auth/internal/data/account"
	"git.dev.enbrands.com/scrm/bed/scrm/app/auth/internal/data/good"
	"git.dev.enbrands.com/scrm/bed/scrm/app/auth/internal/server"
	service2 "git.dev.enbrands.com/scrm/bed/scrm/app/auth/internal/service"
	"git.dev.enbrands.com/scrm/bed/scrm/app/auth/internal/service/v1/account"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

// Injectors from wire.go:

// initApp init kratos application.
func initApp(confServer *conf.Server, confData *conf.Data, logger log.Logger) (*kratos.App, func(), error) {
	dataData, cleanup, err := data.NewData(confData, logger)
	if err != nil {
		return nil, nil, err
	}
	accountRepo := account.NewAccountRepo(dataData, logger)
	goodRepo := good.NewGoodRepo(dataData, logger)
	logic := account2.NewAccountLogic(logger, accountRepo, goodRepo)
	accountService := service.NewAccountService(logic, logger)
	appService := service2.NewAppService(accountService)
	httpServer := server.NewHTTPServer(confServer, logger, appService)
	grpcServer := server.NewGRPCServer(confServer, logger)
	app := newApp(logger, httpServer, grpcServer)
	return app, func() {
		cleanup()
	}, nil
}
